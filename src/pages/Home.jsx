import { useContext, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';

import qs from 'qs';

import { useDispatch, useSelector } from 'react-redux';

import {
  selectFilter,
  setCategoryId,
  setCurrentPage,
  setFilters,
} from '../redux/slices/filterSlice';
import { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice';

import { Categories } from '../components/Categories';
import { Sort, sortList } from '../components/Sort';
import { Skeleton } from '../components/PizzaBlock/Skeleton';
import { PizzaBlock } from '../components/PizzaBlock/PizzaBlock';
import { Pagination } from '../components/Pagination/Pagination';

export const Home = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const { items, status } = useSelector(selectPizzaData);
  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);

  const onChangeCategory = idx => {
    dispatch(setCategoryId(idx));
  };

  const onChangePage = page => {
    dispatch(setCurrentPage(page));
  };

  const getPizzas = async () => {
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const search = searchValue ? `&search=${searchValue}` : '';

    dispatch(
      fetchPizzas({
        sortBy: sortBy,
        order: order,
        search: search,
        category: category,
        currentPage: currentPage,
      }),
    );

    window.scrollTo(0, 0);
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–¥–µ –æ—à–∏–±–∫–∏ –≤ –±—É–¥—É—â–µ–º
  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç —Ç–∞–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId: categoryId > 0 ? categoryId : null,
        currentPage: currentPage,
      });

      navigate(`?${queryString}`);
    }
    isMounted.current = true;

    getPizzas();
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ redux
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));

      const sort = sortList.find(obj => obj.sortProperty === params.sortProperty);

      dispatch(setFilters({ ...params, sort }));
      isSearch.current = true;
    }
  }, []);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  useEffect(() => {
    // –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.scrollTo(0, 0);

    if (!isSearch.current) {
      getPizzas();
    }

    isSearch.current = false;
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  const pizzas = items.map(obj => <PizzaBlock key={obj.id} {...obj} />);
  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

  return (
    <div className={'container'}>
      <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className={'content__error-info'}>
          <h2>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <icon>üòï</icon>
          </h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Çc—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
      )}
      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};
